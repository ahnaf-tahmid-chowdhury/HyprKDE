#!/bin/bash

# Get the XDG Pictures directory properly
SAVE_DIR="$(xdg-user-dir PICTURES)/Screenshots"
mkdir -p "$SAVE_DIR"

# Generate filename with timestamp
FILENAME="screenshot_$(date '+%Y-%m-%d_%H-%M-%S').png"
FILEPATH="$SAVE_DIR/$FILENAME"

# Default mode
MODE=""
COPY_AFTER=false
OPEN_AFTER=false
EDIT_AFTER=false
OCR_AFTER=false

# Function to check command existence and notify if missing
check_command() {
    if ! command -v "$1" &>/dev/null; then
        notify-send -u normal -a "Screenshot" -i dialog-warning "$2" "$3"
        return 1
    fi
}

# Function to copy screenshot to clipboard
copy_screenshot() {
    if check_command "wl-copy" "No wl-clipboard" "wl-clipboard is not installed, skipping clipboard copy."; then
        wl-copy < "$FILEPATH"
    fi
}

# Function to perform OCR
perform_ocr() {
    if check_command "tesseract" "No Tesseract OCR" "Tesseract OCR is not installed, skipping OCR."; then
        tesseract "$FILEPATH" "${FILEPATH%.png}" &>/dev/null
        rm "$FILEPATH"
        FILEPATH="${FILEPATH%.png}.txt"
        [[ "$EDIT_AFTER" = true ]] && EDIT_AFTER=false && OPEN_AFTER=true
    fi
}

# Function to open screenshot
open_screenshot() {
    if ! xdg-open "$FILEPATH" &>/dev/null; then
        MSG="Failed to open screenshot, check your default image viewer settings."
        [[ "$OCR_AFTER" = true ]] && MSG="Failed to open text file, check your default text editor settings."
        notify-send -u normal -a "Screenshot" -p "No image viewer" -i dialog-warning "$MSG"
    fi
}

# Function to edit screenshot
edit_screenshot() {
    for editor in gimp krita inkscape darktable showfoto pinta; do
        if command -v "$editor" &>/dev/null; then
            "$editor" "$FILEPATH" &
            return
        fi
    done
    notify-send -u normal -a "Screenshot" -i dialog-warning "No compatible image editor" \
        "No compatible image editor found. Install one of: GIMP, Krita, Inkscape, Darktable, Showfoto, Pinta."
}

# Help message
show_help() {
    echo "Usage: $0 [option]"
    echo "Options:"
    echo "  -f, --fullscreen   Take a fullscreen screenshot"
    echo "  -s, --select       Take a screenshot of a selected area"
    echo "  -w, --window       Take a screenshot of the focused window"
    echo "  -c, --copy         Copy the screenshot to clipboard"
    echo "  -o, --open         Open the screenshot after capturing"
    echo "  -e, --edit         Edit the screenshot after capturing"
    echo "  -r, --ocr          Perform OCR on the screenshot after capturing"
    echo "  -h, --help         Show this help message"
    exit 1
}

# Check if grim and slurp are installed
if ! check_command "grim" "Screenshot" "Error: grim is not installed. Please install grim." || \
    ! check_command "slurp" "Screenshot" "Error: slurp is not installed. Please install slurp."; then
    exit 1
elif pgrep slurp &>/dev/null; then
    pkill slurp
fi

# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        -f|--fullscreen) MODE="fullscreen" ;;
        -s|--select) MODE="select" ;;
        -w|--window) MODE="window" ;;
        -c|--copy) COPY_AFTER=true ;;
        -o|--open) OPEN_AFTER=true ;;
        -e|--edit) EDIT_AFTER=true ;;
        -r|--ocr) OCR_AFTER=true ;;
        -h|--help) show_help ;;
        *) echo "Unknown option: $1" && show_help ;;
    esac
    shift
done

# Capture screenshot based on mode
case "$MODE" in
    fullscreen) grim "$FILEPATH" ;;
    select) grim -g "$(slurp)" "$FILEPATH" ;;
    window)
        # Get active window geometry
        WIN_INFO=$(hyprctl activewindow)
        # Parse X, Y from 'at:' line (considering possible extra spaces/tabs)
        X=$(echo "$WIN_INFO" | grep "at:" | sed 's/.*at: *\([0-9]*\),\([0-9]*\)/\1/')
        Y=$(echo "$WIN_INFO" | grep "at:" | sed 's/.*at: *\([0-9]*\),\([0-9]*\)/\2/')
        # Parse Width, Height from 'size:' line
        WIDTH=$(echo "$WIN_INFO" | grep "size:" | sed 's/.*size: *\([0-9]*\),\([0-9]*\)/\1/')
        HEIGHT=$(echo "$WIN_INFO" | grep "size:" | sed 's/.*size: *\([0-9]*\),\([0-9]*\)/\2/')

        # Ensure values are valid before running grim
        if [[ -z "$X" || -z "$Y" || -z "$WIDTH" || -z "$HEIGHT" ]]; then
            notify-send -u normal -a "Screenshot" -i dialog-error "Screenshot" \
                "Error: Could not retrieve active window geometry. Please open a window and try again."
            exit 1
        fi

        # Capture the active window
        grim -g "${X},${Y} ${WIDTH}x${HEIGHT}" "$FILEPATH"
        ;;
    *) echo "No mode selected. Use -h for help." && exit 1 ;;
esac

# Process screenshot after capture
if [ -f "$FILEPATH" ]; then
    $OCR_AFTER && perform_ocr
    $COPY_AFTER && copy_screenshot
    $OPEN_AFTER && open_screenshot
    $EDIT_AFTER && edit_screenshot
fi
